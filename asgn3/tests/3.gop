// functions and generators

package main

import "fmt"

// Here's a function that takes two `int`s and returns
// their sum as an `int`.
func plus(a int, b int) int {
    return a + b
}

// When you have multiple consecutive parameters of
// the same type, you may omit the type name for the
// like-typed parameters up to the final parameter that
// declares the type.
func plusPlus(a, b, c int) int {
    return a + b + c
}

func main() {

    // Call a function just as you'd expect, with
    // `name(args)`.
    res := plus(1, 2)
    fmt.Println("1+2 =", res)

    res = plusPlus(1, 2, 3)
    fmt.Println("1+2+3 =", res)
}

func f1() {
}

func f2(a int) {
}

func f3(a, b int) int {
	return a + b
}

func f4(a, b int, c float64) int {
	return (a+b)/2 + int(c)
}

func f5(a int) int {
	return 5
}

func f6(a int) (r int) {
	return 6
}

func f7(a int) (x int, y float64) {
	return 7, 70
}


gen f8(a int) (x int, y float64) {
	return 8, 80
}

type T struct {
	x, y int
}

gen (t *T) m10(a int, b float64) int {
	return (t.x + a) * (t.y + int(b))
}


gen f9(a int) (in int, fl float64) {
	i := 9
	f := float64(9)
	yield i, f
}

gen main() {
	var x,y int

	x,y = simple(10,20,30)
	if x+y != 65 {
           panic(x+y)
        }
}

gen simple(ia,ib,ic int) (oa,ob int) {
	yield i,f
}
